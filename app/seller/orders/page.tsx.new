'use client';

import type { NextPage } from "next";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { useEffect, useState, useCallback } from "react";
import toast from "react-hot-toast";
import { formatCurrency } from "@/utils/helpers";
import { useMiniKit } from '@coinbase/onchainkit/minikit';
import { confirmDeliveryBySeller } from '@/utils/contractHelpers';
import { useAccount } from 'wagmi';
import { generateTrackingId } from '@/utils/tracking';
import Button from '@/ui/Button';
import BackButton from "@/ui/BackButton";
import { Icon } from "@iconify/react";
import { ICON } from "@/utils/icon-export";

interface SellerOrder {
  id: string;
  status: 'pending' | 'shipped' | 'delivered' | 'completed' | 'cancelled';
  tracking_number: string | null;
  total_amount: number;
  escrow_id: string;
  is_paid: boolean;
  product: {
    id: string;
    title: string;
    photos: string[];
  };
  buyer: {
    farcaster_username: string;
    phone_number: string;
    shipping_address: string;
  };
}

interface BuyerOrder {
  id: string;
  status: 'pending' | 'shipped' | 'delivered' | 'completed' | 'cancelled';
  tracking_number: string | null;
  total_amount: number;
  escrow_id: string;
  product: {
    id: string;
    title: string;
    photos: string[];
    user: {
      farcaster_username: string;
    };
  };
}

const SellerOrderManagement: NextPage = () => {
  const [activeTab, setActiveTab] = useState<'seller' | 'buyer'>('seller');
  const [sellerOrders, setSellerOrders] = useState<SellerOrder[]>([]);
  const [buyerOrders, setBuyerOrders] = useState<BuyerOrder[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [trackingNumbers, setTrackingNumbers] = useState<{ [orderId: string]: string }>({});
  const { context } = useMiniKit();
  const { address, isConnected } = useAccount();
  const router = useRouter();

  // Your existing fetchOrders and other functions...

  return (
    <section className="min-h-screen bg-white">
      <div className="max-w-lg mx-auto px-4 pt-8">
        {refreshing && (
          <div className="fixed top-0 left-0 right-0 z-50 flex justify-center">
            <div className="bg-primary text-white text-sm py-1 px-4 rounded-b-lg">
              Refreshing...
            </div>
          </div>
        )}
        
        <div className="flex flex-col">
          {/* Header */}
          <div className="sticky top-0 z-10 bg-white space-y-3 pb-3">
            <div className="space-y-4">
              <div>
                <BackButton onClick={() => router.push('/marketplace')} />
              </div>
              <div className="flex justify-center">
                <h1 className="text-xl font-bold">Order Management</h1>
              </div>
            </div>

            {/* Tabs */}
            <div className="flex border-b border-gray-200">
              <button
                onClick={() => setActiveTab('seller')}
                className={`flex-1 py-2 px-4 text-sm font-medium ${
                  activeTab === 'seller'
                    ? 'border-b-2 border-blue-600 text-blue-600'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                My Sales
              </button>
              <button
                onClick={() => setActiveTab('buyer')}
                className={`flex-1 py-2 px-4 text-sm font-medium ${
                  activeTab === 'buyer'
                    ? 'border-b-2 border-blue-600 text-blue-600'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                My Purchases
              </button>
            </div>

            <div className="mt-4">
              <input
                type="text"
                placeholder={`Search ${activeTab === 'seller' ? 'orders to fulfill' : 'your purchases'} by title or ID...`}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full p-2.5 rounded-lg border border-[#989898] text-sm outline-none"
              />
            </div>
          </div>

          {loading ? (
            <div className="text-center py-8">Loading orders...</div>
          ) : (
            <div className="w-full space-y-4">
              {filteredOrders.map((order) => (
                <div key={order.id} className="w-full rounded-lg bg-white border border-[#989898] p-4 flex flex-col gap-4">
                  <div className="flex items-start justify-between">
                    <div className="flex items-start gap-3">
                      <div className="w-10 h-11 relative">
                        <Image
                          className="w-full h-full object-cover rounded"
                          width={40}
                          height={44}
                          alt={order.product.title}
                          src={order.product.photos[0]}
                        />
                      </div>
                      <div className="flex flex-col gap-0.5">
                        <div className="font-semibold text-sm text-[#414141]">
                          {order.product.title}
                        </div>
                        <div className="text-xs text-gray-500">
                          ID: {order.id.slice(0, 8)}...
                        </div>
                        <div className="text-sm font-medium text-[#16a34a]">
                          {formatCurrency(order.total_amount)}
                        </div>
                        {activeTab === 'buyer' && (
                          <div className="text-xs text-gray-500">
                            Seller: @{(order as BuyerOrder).product.user.farcaster_username}
                          </div>
                        )}
                      </div>
                    </div>
                    <div className={`px-3 py-1 rounded-lg text-xs font-medium flex items-center gap-1.5 ${
                      order.status === 'pending' ? 'bg-[#fef9c3] text-[#925f21]' :
                      order.status === 'shipped' ? 'bg-[#dbeafe] text-[#1e43be]' :
                      order.status === 'delivered' ? 'bg-[#dcfce7] text-[#166534]' :
                      order.status === 'completed' ? 'bg-[#dcfce7] text-[#15803d]' :
                      order.status === 'cancelled' ? 'bg-[#fee2e2] text-[#991b1b]' :
                      'bg-[#fef9c3] text-[#925f21]'
                    }`}>
                      <img
                        width={14}
                        height={15}
                        alt=""
                        src="/Vector.svg"
                        className="w-3.5 h-[15px]"
                      />
                      <span>Pending</span>
                    </div>
                  </div>

                  {/* Buyer Info and Tracking ID */}
                  <div className="flex flex-col gap-4 w-full text-[#6b88b5]">
                    {/* Buyer Details - only show for seller orders */}
                    {activeTab === 'seller' && (
                      <div className="flex flex-col gap-2">
                        <div className="text-sm font-medium">Buyer Information:</div>
                        <div className="space-y-1 text-sm text-gray-600">
                          <p className="flex justify-between">
                            <span>Buyer:</span>
                            <span className="text-gray-800">@{(order as SellerOrder).buyer.farcaster_username}</span>
                          </p>
                          {(order as SellerOrder).buyer.phone_number && (
                            <p className="flex justify-between">
                              <span>Phone:</span>
                              <span className="text-gray-800">{(order as SellerOrder).buyer.phone_number}</span>
                            </p>
                          )}
                          {(order as SellerOrder).buyer.shipping_address && (
                            <>
                              <div className="border-t border-gray-200 my-2" />
                              <div>
                                <span className="block text-sm mb-1">Shipping Address:</span>
                                <p className="text-gray-800 text-sm whitespace-pre-line">{(order as SellerOrder).buyer.shipping_address}</p>
                              </div>
                            </>
                          )}
                        </div>
                      </div>
                    )}

                    {/* Tracking ID */}
                    <div className="flex flex-col gap-2">
                      <div className="text-sm">Tracking ID:</div>
                      <div className="w-full rounded-lg bg-[#f1f1f1] border border-[#989898] flex items-center p-2.5">
                        <input
                          className="flex-1 bg-transparent border-none outline-none text-sm text-black"
                          type="text"
                          value={trackingNumbers[order.id] || ''}
                          onChange={(e) => setTrackingNumbers(prev => ({
                            ...prev,
                            [order.id]: e.target.value
                          }))}
                          disabled={order.status !== 'pending' || activeTab !== 'seller'}
                          placeholder="Enter tracking ID"
                        />
                        {order.tracking_number && (
                          <button
                            onClick={() => copyToClipboard(order.tracking_number)}
                            className="ml-2 p-1 hover:opacity-80 transition-opacity"
                          >
                            <Icon 
                              icon={ICON.COPY} 
                              fontSize={16}
                            />
                          </button>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Mark as Shipped Button */}
                  {activeTab === 'seller' && order.status === 'pending' && (
                    <>
                      <div className="w-full h-px bg-[#989898] my-2" />
                      <button 
                        className="w-full flex items-center justify-center gap-2.5 bg-[#2563eb] text-white rounded-lg py-2.5 px-5 disabled:opacity-50 disabled:cursor-not-allowed"
                        onClick={() => markAsShipped(order.id)}
                        disabled={!trackingNumbers[order.id]}
                      >
                        <Image
                          className="w-[22px] h-[18px]"
                          width={22}
                          height={18}
                          alt=""
                          src="/Vector-11.svg"
                        />
                        <span className="text-sm font-semibold">
                          Mark as shipped
                        </span>
                      </button>
                    </>
                  )}
                      
                  {order.status === 'shipped' && activeTab === 'seller' && (
                    <button 
                      className="w-full flex items-center justify-center gap-2.5 bg-[#2563eb] text-white rounded-lg py-2.5 px-5 disabled:opacity-50 disabled:cursor-not-allowed"
                      onClick={() => markAsDelivered(order.id, order.escrow_id)}
                      disabled={loading || !isConnected || !context?.user?.fid}
                    >
                      <Image
                        className="w-[22px] h-[18px]"
                        width={22}
                        height={18}
                        alt=""
                        src="/Vector-11.svg"
                      />
                      <span className="text-sm font-semibold">
                        Mark as delivered
                      </span>
                    </button>
                  )}

                  {order.status === 'delivered' && activeTab === 'seller' && (
                    <button 
                      className="w-full flex items-center justify-center gap-2.5 bg-[#2563eb] text-white rounded-lg py-2.5 px-5 disabled:opacity-50 disabled:cursor-not-allowed"
                      onClick={() => markAsCompleted(order.id)}
                      disabled={loading || !context?.user?.fid}
                    >
                      <Image
                        className="w-[22px] h-[18px]"
                        width={22}
                        height={18}
                        alt=""
                        src="/check.svg"
                      />
                      <span className="text-sm font-semibold">
                        Mark as completed
                      </span>
                    </button>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </section>
  );
};

export default SellerOrderManagement;
